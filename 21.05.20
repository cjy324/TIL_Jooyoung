-CS 공부

# 49. JavaScript 변수선언 방식: var, let, const

---

## var

- 변수의 **재선언, 재할당이 가능**하다.
- 변수를 한 번 더 선언했음에도 불구하고, 에러가 나오지 않고 각기 다른 값이 출력되는 것을 볼 수 있다.
- 이는 유연한 변수 선언으로 간단한 테스트에는 편리 할 수 있겠으나, 코드량이 많아 진다면 어디에서 어떻게 사용 될지도 파악하기 힘들뿐더러 값이 바뀔 우려가 있다.
- 그래서 **ES6** 이후, 이를 보완하기 위해 추가 된 변수 선언 방식이 `let` 과 `const` 이다.

```jsx
    var name = 'bathingape'
    console.log(name) // bathingape

    var name = 'javascript'
    console.log(name) // javascript
```

## let

- 변수의 **재선언은 불가능**하지만 **재할당**은 가능하다.

```jsx
    let name = 'bathingape'     //최초 선언
    console.log(name) // bathingape

    let name = 'javascript'   //<-재선언(불가능)
    console.log(name)
    // Uncaught SyntaxError: Identifier 'name' has already been declared

    name = 'react'            //재할당(가능)
    console.log(name) //react
```

## const

- 변수의 **재선언, 재할당 모두 불가능**하다.

```jsx
    const name = 'bathingape'   //최초 선언
    console.log(name) // bathingape

    const name = 'javascript'       //<-재선언(불가능)
    console.log(name)
    // Uncaught SyntaxError: Identifier 'name' has already been declared

    name = 'react'            //재할당(불가능)
    console.log(name)
    //Uncaught TypeError: Assignment to constant variable.
```

# 50. Promise()(feat. 콜백)

---

## 정의

- 자바스크립트 **비동기 처리에 사용되는 객체**
- **자바스크립트의 대부분의 작업들이 비동기**로 이루어짐
- 어떤 작업 요청하면서 콜백 함수를 등록하면 **작업이 수행된 후 결과를 콜백 함수를 통해 알려주는 방식**
- 이 방식의 단점은 하나의 작업을 콜백으로 결과를 받은 뒤 순차적으로 다음 작업을 진행하고자 할때 **콜백 중첩(콜백 지옥: 콜백 함수를 연속해서 사용할 때 발생하는 문제)이 발생**하게 되서 코드의 가독성이 저하된다.

```jsx
//콜백 지옥 예시

$.get('url', function(response) {
	parseValue(response, function(id) {
		auth(id, function(result) {
			display(result, function(text) {
				console.log(text);
			});
		});
	});
});
```

- **이를 극복하기 위해 Promise()패턴이 사용**되고 있다.

## 개념

- Promise()패턴을 사용하면 **비동기 작업들을 순차적으로 진행하고자 할때** 컨트롤이 수월해지고 코드의 가독성이 좋아진다.
- 프로미스는 주로 서버에서 **받아온 데이터를 화면에 표시할 때** 사용한다. 일반적으로 웹 애플리케이션을 구현할 때 서버에서 데이터를 요청하고 받아오기 위해 아래와 같은 API를 사용한다.

```jsx
$.get('url 주소/products/1', function(response) {
// ...});
```

- 위 API가 실행되면 서버에다가 ‘데이터 하나 보내주세요’ 라는 요청을 보낸다. 그런데 여기서 **데이터를 받아오기도 전에 마치 데이터를 다 받아온 것 마냥 화면에 데이터를 표시하려고 하면 오류가 발생**하거나 빈 화면이 뜬다. 이와 같은 문제점을 해결하기 위한 방법 중 하나가 프로미스다.

## 프로미스의 3가지 상태(states)

- 프로미스를 사용할 때 알아야 하는 가장 기본적인 개념이 바로 프로미스의 상태(states)다.
- 여기서 말하는 상태란 프로미스의 처리 과정을 의미한다.
- new Promise()로 프로미스를 생성하고 종료될 때까지 **3가지 상태**를 갖는다.
1. **Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태**
2. **Fulfilled(이행) : 비동기 처리가 완료된 상태('이행' 상태를 다르게 표현하면 '완료')**
3. **Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태**

### - Pending(대기)

먼저 아래와 같이 `new Promise()` 메서드를 호출하면 대기(Pending) 상태가 된다.

```jsx
new Promise();

//메서드를 호출할 때 콜백 함수를 선언할 수 있고, 콜백 함수의 인자는 resolve, reject다.
new Promise(function(resolve, reject) {
  // ...
});
```

### - Fulfilled(이행)

여기서 콜백 함수의 인자 `resolve`를 아래와 같이 실행하면 이행(Fulfilled) 상태가 된다.

```jsx
new Promise(function(resolve, reject) {
  resolve();
});

//그리고 이행 상태가 되면 아래와 같이 then()을 이용하여 처리 결과 값을 받을 수 있다.
function getData() {
  return new Promise(function(resolve, reject) {
    var data = 100;
    resolve(data);
  });
}

// resolve()의 결과 값 data를 resolvedData로 받음
getData().then(function(resolvedData) {
  console.log(resolvedData); // 100
});
```

### - Rejected(실패)

여기서 reject를 아래와 같이 호출하면 실패(Rejected) 상태가 된다.

```jsx
new Promise(function(resolve, reject) {
  reject();
});

//그리고, 실패 상태가 되면 실패한 이유(실패 처리의 결과 값)를 catch()로 받을 수 있다.
function getData() {
  return new Promise(function(resolve, reject) {
    reject(new Error("Request is failed"));
  });
}

// reject()의 결과 값 Error를 err에 받음
getData().then().catch(function(err) {
  console.log(err); // Error: Request is failed
});
```

## 예제

```jsx
//Promise 선언
var _promise = function (param) {

	return new Promise(function (resolve, reject) {

		// 비동기를 표현하기 위해 setTimeout 함수를 사용 
		window.setTimeout(function () {

			// 파라메터가 참이면, 
			if (param) {

				// 해결됨 
				resolve("해결 완료");
			}

			// 파라메터가 거짓이면, 
			else {

				// 실패 
				reject(Error("실패!!"));
			}
		}, 3000);
	});
};

//Promise 실행
_promise(true)
.then(function (text) {
	// 성공시
	console.log(text);
}, function (error) {
	// 실패시 
	console.error(error);
});
```
