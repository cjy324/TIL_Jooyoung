< .>
. : 다음으로 이동한다는 의미

<매개변수>
: 함수 안쪽의 변수와 바깥쪽 변수를 연결해주는 변수

<return>
retutn을 사용하기 위해선 타입을 맞춰주어야 함
retutn을 하면 함수는 거기서 종료

ex)
int 매서드(데이터 투입구){
    retutn 1(데이터 배출구);
}
String 매서드(){
    retutn "1";
}


<상수>
상수란 변하지 않는 값을 의미
상수는 final 키워드를 사용해 선언
상수는 대문자로만 작성

ex)
final int J;  
// J에는 값을 단 한 번 담을 수 있습니다.
J = 10;
// 이제 J 값을 변경할 수 없습니다.

<묵시적 형(타입) 전환>
크기가 작은 타입을 크기가 더 큰 타입으로 바꿀 때는 컴파일러에 별도의 명령을 하지 않아도 됨

ex)
int x = 50000;
// 형 변환이 묵시적으로 이루어짐
long y = x;

<명시형 전환>
크기가 더 큰 타입을 작은 타입으로 바꿀 때는 명시적으로 변환해주어야 함

ex)
long x = 50000;
// 묵시적 형 변환을 시도하면 오류가 발생
int y = x;
// 다음과 같이 명시적으로 형 변환
int y = (int) x;

<산술연산자>
// i와 j의 합
i + j;
// i와 j의 차
i - j;
// i와 j의 곱
i * j;
// i를 j로 나눈 몫
i / j;
// i를 j로 나눈 나머지
i % j;

<비교연산자>
int i = 10; 
int j = 10;    

// i와 j가 같은지 비교하는 연산자
    System.out.println(i == j );    // true
// i와 j가 다른지 비교하는 연산자
    System.out.println(i != j );    // false
// i가 j보다 작은지 비교하는 연산자
    System.out.println(i < j);      // false
// i가 j보다 작거나 같은지 비교하는 연산자
    System.out.println( i <= j);    // true
// i가 j보다 큰지 비교하는 연산자
    System.out.println(i > j);      // false
// i가 j보다 크거나 같은지 비교하는 연산자
    System.out.println(i >= j);     // true

<논리연산자>
A	B	A && B	A || B	!A
TRUE	TRUE	TRUE	TRUE	FALSE
TRUE	FALSE	FALSE	TRUE	FALSE
FALSE	TRUE	FALSE	TRUE	TRUE
FALSE	FALSE	FALSE	FALSE	TRUE

<삼항연산자>
"조건식 ? 피연산자1 : 피연산자2" 
조건식이 true이면 피연산자1을, 조건식이 false면 피연산자2를 수행합니다.

ex)
int b1 = 5 > 4 ? 50 : 40;   
  
위 코드에서 5 > 4는 참이므로 b1에는 50이 저장

<switch>
switch문은 어떤 변수의 값에 따라서 실행하는 문장이 바뀌는 제어문

예시1)
int value = 1;

switch(value){
    // value가 1이면 "100"을 출력합니다.
    case 1:     
        System.out.println("100");
        break;
    // value가 2이면 "200"을 출력합니다.
    case 2:
        System.out.println("200");
        break;
    // value가 3이면 "300"을 출력합니다.
    case 3 :
        System.out.println("300");
        break;
    // value가 1, 2, 3이 아니면 "그 외의 숫자"를 출력합니다.
    default :
        System.out.println("그 외의 숫자");
}

예시2)
int month = Calendar.getInstance().get(Calendar.MONTH) + 1;
        String season = "";
        
        // 다음과 같이 case문을 한번에 사용하면 더 짧게 코드를 짤 수 있습니다.
        switch(month) {
            case 1:
            case 2:
            case 12:
                season = "겨울";
                break;
            case 3:
            case 4:
            case 5:
                season = "봄";
                break;
            case 6:
            case 7:
            case 8:
                season = "여름";
                break;
            case 9:
            case 10:
            case 11:
                season = "가을";
                break;
        }
        System.out.println("지금은 " + month + "월이고, " + season + "입니다.");

<반복문 - while>
while 문은 실행문을 반복적으로 실행해야 할 때 사용

예시1)
// 조건이 true일 동안 반복해서 실행문을 실행
while(조건문){
    실행문; 
}

예시2)
아래 코드는 0부터 5까지 숫자를 차례로 출력하는 반복문

    int i = 0;
    while(i < 6){
        System.out.println(i);
        //조건문을 원하는 만큼만 반복하고 빠져나가기 위한 부분 
        i++;
    }

<반복문 - for>
시작점, 조건, 끝점을 한번에 파악할 수 있는 장점이 있다

예시1)
for 문 사용 방법
// 조건식 수행 결과가 false라면 for 문을 빠져나감
for(초기화식; 조건식; 증감식) {  
    // 조건식 수행 결과가 true라면 실행문을 수행

    실행문1;
    실행문2;
}

예시2)
1부터 10까지 숫자 중 3의 배수만 출력하고 싶다면 아래의 예처럼 쓸 수 있음

for(int i = 1 ; i <= 10 ; i++) {
    // if 문을 추가해, i가 3의 배수일 때만 실행문을 수행합니다.
    if(i % 3 == 0)
        System.out.println(i);
}

<for each>
for 문을 이용하는 구식 방법
for(int i = 0 ; i < iarr.length; i++){
    int value = iarr[i];
    System.out.println(value);
}

##### for-each 문을 이용하는 새로운 방법

for each 문을 사용하면 for 문을 사용할 때 보다 코드가 훨씬 간결해집니다.

```java
// 사용법 => for((타입 값을 받아줄 변수명) : (출력하고 싶은 자료구조))
for(int value : iarr){         
    System.out.println(value);
}


<배열>
배열 사용 방법
① 선언과 초기화를 따로

int[] array1 = new int[4];

// array1에 5, 10, 15, 20를 차례로 저장
array1[0] = 5;
array1[1] = 10;
array1[2] = 15;
array1[3] = 20;    


② 선언과 초기화를 동시에

// array2에 정수 5, 10, 15, 20, 25, 30를 차례로 저장
int[] array2 = new int[] {5, 10, 15, 20, 25, 30};

예시)
array의 길이를 알 수 없다면 어떻게 해야 할까요?

array.length를 사용하면 array 배열의 길이를 읽어올 수 있습니다.
다음은 배열의 원소를 모두 곱한 값을 출력하는 코드입니다.

// 곱을 저장할 변수는 반복문 밖에서 선언합니다.
int mul = 1;

for(int i = 0; i < array.length; i++){ 
    mul = mul * array[i];
}

System.out.println(mul);

<이차원 배열>
이차원 배열이란 배열을 원소로 가지는 배열을 의미

예시)
// array1은 세 배열을 원소로 가지고
// 배열의 원소는 정수를 4개 담을 수 있다.
int[][] array1 = new int[3][4];
array1[0][0] = 10;

// 이차원 배열 선언과 동시에 초기화 
int[][] array2 = {{1}, {2, 3}, {4, 5, 6}};


<클래스 생성>
객체를 만드는 방법
객체를 생성할 때에는 new를 사용해야 합니다. 다음은 String 클래스의 객체를 만드는 코드입니다.

String str1 = new String("hello");

<클래스 필드 선언>
필드란?
필드(field)란 객체의 속성입니다. 아래는 문자열 타입 필드 name과 정수 타입 필드 number를 저장하는 Car 클래스를 선언하는 코드입니다.

public class Car {
    String name;
    int number;
}

<클래스 메소드 선언>
힌트) 메소드의 매개변수와 리턴값에 대해 알아봅시다. 아래의 예를 참고하여 문제를 해결해 보세요.

public class MyClass{
    // 매개변수와 리턴 값이 없는 메소드
    public void method1() {
        System.out.println("method1이 실행됩니다.");
    }

    // 매개변수로 정수를 받고, 리턴값은 없는 메소드
    public void method2(int x) {
        System.out.println(x + " 를 이용하는 method2입니다.");
    }

    // 매개변수는 없고, 정수를 리턴하는 메소드
    public int method3() {
        System.out.println("method3이 실행됩니다.");
        return 10;
    }

    // 매개변수로 정수를 받고, 정수를 리턴하는 메소드
    public int method4(int y) {
        System.out.println(y + " 를 이용하는 method5입니다.");
        return 5;
    }
}


메소드를 사용하려면 클래스와 클래스 인스턴스를 먼저 생성해야 합니다. 인스턴스를 생성했다면 .메소드명()처럼 메소드를 호출할 수 있습니다. 아래의 예를 참고하여 문제를 해결해 보세요.

① 클래스를 선언 및 정의

public class MyClass {
    public void method1() {
        System.out.println("method1이 실행됩니다.");
    }
    public void method2(int x) {
        System.out.println(x + " 를 이용하는 method2입니다.");
    }
}

② MyClass의 인스턴스를 만들어, 메소드를 호출

```java
public class MyClassExam {
    public static void main(String args[]) {
        // 인스턴스 생성 
        MyClass my1 = new MyClass();

        // 메소드 호출
        my1.method1();
        my1.method2(10);
}

<static>
static 메소드는 static한 필드(속성)만 사용할 수 있습니다

예시1)
static 과 non-static
public class VariableScopeExam {
    int globalScope = 10;          // 인스턴스 변수
    static int staticVal = 7;      // 클래스 변수

    public void scopeTest(int value) {
        int localScope = 20;        //지역변수
    }

    public static void main(String[] args) {
        System.out.println(staticVal);     // 클래스 변수는 인스턴스화 하지 않고도 사용가능 
        System.out.println(globalScope);   // 오류
    }
}

예시2)
static 변수는 인스턴스가 아닌 클래스에 귀속됩니다. 따라서, 인스턴스가 여러개 생성돼도 static 변수는 딱 하나만 있습니다. 아래 코드를 참고하세요.

ValableScopeExam v1 = new ValableScopeExam();
ValableScopeExam v2 = new ValableScopeExam();

v1.staticVal = 10;
v2.staticVal = 20; 

// static은 값을 공유하므로 두 코드 모두 20을 출력
System.out.println(v1.statVal);
System.out.println(v2.statVal);





<클래스 String 특징>
각 인스턴스가 같은 값을 저장한다고 해서 두 인스턴스가 같은 건 아닙니다.

String str1 = new String("hello");
String str2 = new String("hello");
위 코드에서 str1은 new를 통해 만든 새로운 인스턴스를, str2 또한 new를 통해 만든 새로운 인스턴스를 참조합니다. 두 인스턴스가 저장하는 값은 같지만 str1과 str2는 서로 다릅니다.

문자열 비교하기
두 값을 비교하기 위해서는 String 클래스의 equals 메소드를 이용합니다.

String str1 = new String("hello");

if(str1.equals("hello"))
    System.out.println("str1은 hello와 같습니다.");


<String 클래스가 제공하는 메소드>
concat: 문자열을 붙일 때 사용합니다.
substring: 문자열을 자를 때 사용합니다.
힌트) 두 메소드를 사용하는 방법은 아래 코드를 참고하세요.

String str1 = new String("hello");
String str2 = new String("world");

// helloworld 출력
System.out.println(str1.concat(str2));  

// el 출력
System.out.println(str1.substring(1, 3));   
// llo 출력
System.out.println(str1.substring(2));








