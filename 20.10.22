-게시판 삭제기능 구현 어느정도 수행 가능
-게시판 프로젝트: size함수, 필요시 객체생성, 삭제, 수정, 검색, 최신추가순 리스팅, 날짜, 배열공간 확장, add함수까지 수행
-컴파일러 관련 공부

-자세한 내용은 모두 티스토리에.....



-오늘 마무리 못한 내용


게시판 저장공간을 1억개 정도로 설정하면 안좋은점
불필요한 공간을 차지하게됨
->불필요한 램 용량을 잡아먹음
->프로그램 실행 과부화..
		

과제 1
 -프로그램이 시작하자마자 defult 게시물 32개 [ㅇ]

init = 초기화하다
Big Is ugly = 큰 소스코드는 절대 좋지 않다

생성자 메소드
생성사 메소드는 클래스명과 동일하다
리턴 파일 도 없다
app.init();도 더이상 쓸 필요가 없다

파란색이 인스턴스 변수
갈색이 지역변수
this.
나랑 같은 객체안에 속해있는 변수를 지정

지역변수에는 this.를 붙이지 않는다




과제 2 [ㅇ]
 -article list 1 => 최신 게시물 10개 출력
 ex) 32~23번
 -article list 2 => 최신 게시물 10개 출력
 ex) 22~13번
 -article list 3 => 최신 게시물 10개 출력
 ex) 12~3번
 -article list 4 => 최신 게시물 10개 출력
 ex) 2~1번


#생성자
생성자는 객체 생성 시 객체의 필드를 초기화합니다. 다음 코드에서 Car 생성자는 문자열을 매개변수로 받아, 자동차의 이름을 짓습니다.

public class Car {
    String name;
    int number;

    public Car(String n) {
        name = n;
    }
}

 
#this
 public class Car{
        String name;
        int number;

        public Car(String n){
            name = n;
        }
    }
위 코드의 n은 이름만 봐서는 n이 무엇을 의미하는지 알 수 없습니다. 아래처럼 변수명을 name으로 바꾼 후, this 키워드를 사용해 매개변수와 필드를 구별하면 코드가 더 읽기 쉽습니다.

    public Car(String name){
        this.name = name;
    }

#메소드 오버로딩
java에선 이름은 같지만 매개변수/리턴타입이 다른 메소드를 여러 개 생성할 수 있습니다. 아래의 예를 참고하여 run 메소드를 오버 로딩해보세요.

class MyClass2{
    public int plus(int x, int y) {
        return x+y;
    }
    public int plus(int x, int y, int z) {
        return x + y + z;
    }
    public String plus(String x, String y) {
        return x + y;
    }
}

#생성자 오버로딩과 this
매개변수를 받지 않는 생성자와 매개변수를 받는 생성자는 아래와 같이 만들 수 있습니다.

public Car() {
    this.name = "이름없음";
    this.number = 0;
}

public Car(String name, int number) {
    this.name = name;
    this.number = number;
}
위 코드에서는 생성자끼리 코드가 중복되므로, this()를 이용해 코드 중복을 피하는 편이 좋습니다.

public Car() {
    // 자기 자신의 생성자를 호출
    this("이름없음", 0);
}
public Car(String name, int number) {
    this.name = name;
    this.number = number;
}
