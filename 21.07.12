- Uploader : form없이 파일 업로드 구현, 전송하기 버튼으로 업로드 실행되도록 구현

- JS 기초다지기

# File(작성중)

---

[https://developer.mozilla.org/ko/docs/Web/API/File](https://developer.mozilla.org/ko/docs/Web/API/File)

- File 객체는 보통 FileList 객체에서 가져올 수 있다.
- 그리고 FileList 객체는 사용자가 <input> 요소에서 파일을 선택했을 때, 드래그 앤 드롭 작업의 DataTransfer 객체에서, 그리고 HTMLCanvasElement의 mozGetAsFile() API에서 반환된다.
- File 객체는 특정 종류의 Blob이며, Blob을 사용할 수 있는 모든 맥락에서 사용할 수 있다.
- 특히 FileReader, URL.createObjectURL(), createImageBitmap() (en-US), XMLHttpRequest.send()는 Blob과 File을 모두 허용한다.

# FileList

---

[https://developer.mozilla.org/ko/docs/Web/API/FileList](https://developer.mozilla.org/ko/docs/Web/API/FileList)

- 이 타입의 객체는 HTML <input> 엘리먼트의 files 속성으로부터 반환
- 이는 <input type="file"> 엘리먼트로 선택된 파일의 리스트에 접근하도록 한다.
- 또한 드래그 앤 드랍 API를 사용할 때 드랍된 파일의 리스트에도 사용된다.
- 이 사용에 대한 자세한 내용은 [DataTransfer](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) 객체 설명을 참고

```jsx
const **file = document.getElementById('input').files[0];**
```

# Drag & Drop API(작성중)

---

# FormData

---

[https://developer.mozilla.org/ko/docs/Web/API/FormData](https://developer.mozilla.org/ko/docs/Web/API/FormData)

[https://coding-food-court.tistory.com/11](https://coding-food-court.tistory.com/11)

- FormData 객체는 <form>태그를 대신할 수 있는 자바스크립트 객체이다.

```jsx
const formData = new FormData();
```

- 일반적으로는 HTML상에서 <form> 태그를 사용해 submit으로 데이터를 전송한다.
- 하지만 FormData객체를 사용하면 ajax통신으로 비동기 데이터 전송을 할 수 있다.
- 즉, 페이지 전환 없이 폼 데이터를 제출 하고 싶을 때 바로 FormData 객체를 사용한다.

## 함수

```jsx
1. formData.append(name, value)  
//append 메소드로 키-값 형식으로 하나씩 추가한다.
// 같은 키를 가진 값을 여러 개 넣을 수도 있다. 
// 덮어씌워지지 않고 추가된다. 
// 참고로 값은 문자열로 자동 변환된다. 
// 숫자를 넣어도 문자열이 되고, 배열을 넣어도 콤마로 구분한 문자열이 된다. 
// 객체는 넣으면 무시되고 'Object1'처럼 문자열로 입력된다.

2. formData.append(name, blob, fileName) 
// input type이 file인 경우에 사용
// fileName은 file의 이름

3. formData.delete(name)
// 주어진 name의 필드를 제거

4. formData.get(name)
// 주어진 name에 해당하는 필드의 value 값을 반환

5. formData.getAll(name)
// append() 함수로 추가시 name이 중복된다.
// 따라서 주어진 name에 해당하는 필드의 모든 value 값을 반환

6. formData.has(name)
// 주어진 name에 해당하는 필드가 있는 경우 true, 없으면 false를 반환

7. formData.set(name, value) or (name, blob, fileName)
// append() 함수처험 필드를 추가
// append() 함수와 차이점
// 기존 name에 해당하는 모든 필드를 제거한 후 추가시킴
```
