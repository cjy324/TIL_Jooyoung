-CS공부

# 15. IDE

---

- 통합개발환경
- 안드로이드스튜디오,Xcode,Eclipse 등

# 16. 프로그래밍 언어

---

저수준 언어

- 컴퓨터친화적: C

고수준 언어

- 인간친화적: C++ java python 등

# 17. 클라이언트 vs 서버

---

- 클라이언트(프론트엔드): 서비스를 사용하는 사용자들이 소유한 컴퓨터 사이드
- 서버(백엔드): 클라의 요청에 응답하는 보이지 않는 컴퓨터 사이드

# 18. 리눅스?우분투?레드헷?

---

- 리눅스: 프로그램을 돌리기 위한 운영체제
- 우분투: 리눅스의 버전 중 가장 유명한 버전(무료)
- 레드헷: 리눅스의 버전 중 유료버전(AS가 가능, 금융 등 안정적인 서비스를 보장받기 위해 유료로 관리)

# 19. API

---

- 클라와 서버가 서로 다른 프로그램에서 요청과 응답을 주고받을 수 있게 만든 체계

# 20. CRUD

---

- Create
- Read
- Update
- Delete

# 21. RESTful API

---

- CRUD의 체계가 잘 잡혀있는 API
- Create - POST
- Read - GET
- Update - PUT(전체)/PATCH(일부)
- Delete - DELETE

# 22. HTTP 상태  코드

---

- 200대: 성공
- 400대: 실패(클라측 요청에서 문제)

    ex) 404에러: 요청이 잘못됐다.

- 500대: 실패(서버측 응답에서 문제)

# 23. SDK

---

- API를 제공해주는 소프트웨어를 개발할 때 도움을 주는 '다른 소프트웨어'

# 24. JSON

---

- 클라와 서버는 요청과 응답을 주고받고, 그때 필요한 데이터들을 JSON형식으로 주고받는다.
- {

    "키": "값", 

    "키": ["값1", "값2", "값3"]

    }

# 25. HTML

---

- Hyper Text Markup Language
- 브라우저가 볼 수 있는(이해할 수 있는) 문서(정보)를 적는 언어(코드)

# 26. CSS

---

- Cascading Style Sheets
- HTML에 디자인을 입히는 코드

# 27. 퍼블리싱

---

- HTML과 CSS 작업을 합쳐서 퍼블리싱 작업이라고 함

# 28. 웹과 앱의 차이

---

- 웹: HTML/CSS/JS 등 새로고침으로 서버로 부터 정보를 실시간으로 가져온다.
- 앱: 설치를 통해 HTML/CSS/JS 등을 초기에 설치한 이후에는 다시 정보를 가져올 필요가 없다.
